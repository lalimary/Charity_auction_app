<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($rootScope, $scope, $timeout, $location, $log, $window, spUtil, nowAttachmentHandler, spAriaUtil, spNavStateManager) {
  $scope.submitting = false;
  $scope.mandatory = [];
  $scope.errorMessages = [];
  $scope.data.show_sql = false;
  $scope.saveButtonSuffix = spUtil.getAccelerator('s');
  $scope.isPageReady = false;
  $scope.embeddedInModal = false;
  $scope.adminMenu = {
    encodedPageUrl: encodeURIComponent($location.url()),
    getClientScriptCount: function() {
      var count = 0;
      if ($scope.data.f.client_script) {
        count += $scope.data.f.client_script.onChange.length;
        count += $scope.data.f.client_script.onLoad.length;
        count += $scope.data.f.client_script.onSubmit.length;
      }
      return count;
    }
  };
    var tableId = $scope.data.sys_id != -1 ? $scope.data.sys_id : ($scope.data.f ? $scope.data.f._attachmentGUID : -1);
    spUtil.recordWatch($scope, "sys_attachment", "table_sys_id=" + tableId, function (response, data) {
    $scope.attachmentHandler.getAttachmentList();
    if (response.data) {
        var options = {};
        options.operation = response.data.operation;
        options.filename = response.data.display_value;
    options.sys_id = tableId;
    options.table = $scope.data.table;
        options.state = (response.data.record && response.data.record.state) ? response.data.record.state.value : "";
        if (options.operation === 'update' && options.state === 'not_available')
         $rootScope.$broadcast("attachment.updated", options);
    }
});
 
  $rootScope.$on('$sp.html.editor.progress', function(e, conf) {
      $scope.submitting = conf.state;
  });
 
  $scope.getButtonClass = function(action) {
        if (action.form_style == "destructive")
            return "btn-danger";
 
        if (action.form_style == "primary")
            return "btn-primary";
 
        return "btn-default";
    };
 
  $scope.getUIActions = function(type) {
    if ($scope.data.disableUIActions)
      return [];
    if (type) {
      return $scope.data.f._ui_actions.filter(function(action) {
        //We handle the primary action button separately.
        return !action.primary && action['is_' + type];
      });
    } else {
      return $scope.data.f._ui_actions;
    }
  }
 
  $scope.getPrimaryAction = function() {
    var primaryActions = $scope.data.f._ui_actions.filter(function(action) {
      return action.primary;
    });
    return (primaryActions.length) ? primaryActions[0] : null;
  }
 
  $scope.getUIActionContextMenu = function(event) {
    var menu = [];
    if (event.ctrlKey)
      return menu;
 
    var contextActions = $scope.getUIActions('context');
    contextActions.forEach(function(action) {
      menu.push([action.name, function() {
        $scope.triggerUIAction(action);
      }]);
    });
 
    if (contextActions.length > 0)
      menu.push(null);
    menu.push([$scope.data.exportPDFMsg, function() {
      exportPDF("");
    }]);
    menu.push([$scope.data.exportPDFLandMsg, function() {
      exportPDF('true');
    }]);
 
    return menu;
  }
 
  function exportPDF(landscape) {
    $window.open("/" + $scope.data.f.table + ".do?PDF&landscape=" + landscape + "&sys_id=" + $scope.data.sys_id + "&sysparm_view=" + $scope.data.f.view);
  }
 
  //trigger the primary UI Action on save (if there is one)
  var deregister = $scope.$on('$sp.save', function() {
    var primaryAction = $scope.getPrimaryAction();
    if (primaryAction)
      $scope.triggerUIAction(primaryAction);
  });
  $scope.$on('$destroy', function() {
    deregister()
  });
 
  $scope.triggerUIAction = function(action) {
        if ($scope.data.disableUIActions && !action.primary) {
      return;
    }
 
    var activeElement = document.activeElement;
    if (activeElement) {
      activeElement.blur();
    }
 
    $scope.$evalAsync(function() {
      if (g_form) {
        $scope.submitting = true;
        if (!g_form.submit(action.action_name || action.sys_id))
          $scope.submitting = false;
      }
    });
  }
 
  $scope.$on("spModel.uiActionComplete", function(evt, response, savedFormSysId) {
    if (!response.isInsert &&  ($scope.data.sys_id !== savedFormSysId))
      return;
 
    $scope.submitting = false;
    if (response.isActionAborted)
      return;
 
    var sysID = (response.isInsert) ? response.sys_id : $scope.data.sys_id;
    loadForm($scope.data.table, sysID).then(constructResponseHandler(response));
  });
 
  function constructResponseHandler(response) {
    return function() {
      $rootScope.$broadcast("sp.form.submitted", {sys_id: (response.isInsert) ? response.sys_id : $scope.data.sys_id});
      var message;
      var eventName = "sp.form.record.updated";
      if (response.isInsert) {
        message = $scope.data.recordAddedMsg;
        var search = $location.search();
        search.sys_id = response.sys_id;
        search.spa = 1;
        $location.search(search).replace();
      } else
        message = $scope.data.updatedMsg;
 
      $scope.data.hideRelatedLists = hideRelatedLists();
      $scope.$emit(eventName, $scope.data.f._fields, $scope.data.sys_id);
      $rootScope.$broadcast(eventName, $scope.data.f._fields, $scope.data.sys_id);
      $scope.status = message;
      spUtil.addTrivialMessage(message);
      spUtil.simulateFakeFormSubmitForAutoComplete('widget-form', $scope.data.f._fields);
      $timeout(clearStatus, 2000);
    }
  }
 
  var ctrl = this;
  // switch forms
  var unregister = $scope.$on('$sp.list.click', onListClick);
  $scope.$on("$destroy", function() {
    unregister();
  })
 
    function _save() {
        var primaryAction = $scope.getPrimaryAction();
    if (primaryAction)
      $scope.triggerUIAction(primaryAction);
    }
 
    function onListClick(evt, arg) {
        spUtil.clearMessages();
        loadForm(arg.table, arg.sys_id);
    }
 
  function loadForm(table, sys_id) {
    var f = {};
    $scope.data.table = f.table = table;
    $scope.data.sys_id = f.sys_id = sys_id;
    f.view = $scope.data.view;
    return $scope.server.update().then(setupAttachmentHandler);
  }
 
  function openRelatedList(e, queryString) {
    // todo: Open this in a modal
    $location.search(queryString);
    e.preventDefault();
  }
 
  $scope.$on('spModel.fields.rendered', function() {
    if (ctrl.panels)
      ctrl.panels.removeClass('shift-out').addClass('shift-in');
  });
 
    var g_form;
    function initForm(gFormInstance) {
              $scope.$evalAsync(function() {
             if ($('#widget-form').parents('.modal').length)
                $scope.embeddedInModal = true;
        })
 
        if (gFormInstance.getTableName() == $scope.data.f.table){
            g_form = gFormInstance;
            spNavStateManager.register($scope.data.table, _save, g_form);
            $scope.isPageReady = true;
            $timeout(function() {
                $rootScope.$emit('spModel.gForm.rendered', g_form);
            }, 175);
        }
    }
 
  $scope.$on('spModel.gForm.initialized', function(e, gFormInstance) {
        initForm(gFormInstance);
  });
 
    $scope.$on('spModel.gForm.env.created', function(e, gFormInstance) {
        initForm(gFormInstance);
  });
 
    // update the comments or worknotes based on activity stream
    $scope.$on("activity_stream_is_changed", function(event, data) {
        if (g_form && g_form.hasField(data.fieldName)) {
            g_form.setValue(data.fieldName, data.input);
            if (data.fieldToClear != "" && g_form.hasField(data.fieldToClear))
                g_form.setValue(data.fieldToClear, "");
        }
    })
 
  // Show or hide related lists
  $scope.$watch('data.f._related_lists', function() {
    $scope.data.hideRelatedLists = hideRelatedLists();
  }, true);
 
    $scope.hideDuplicateSaveAction = function (item) {
        if (!$scope.data.advancedUIEnabled)
            return true;
        return ($scope.data.advancedUIEnabled && item.sys_id !== "432ace8b0a0a0b34006b02832660c894" && item.sys_id !== "42e780d40a0a0b34007e0d4a52d33405");
    };
 
  function hideRelatedLists() {
    if (!$scope.data.f._related_lists)
      return true;
    if ($scope.options.hideRelatedLists == true)
      return true;
    if ($scope.data.sys_id == '-1')
      return true;
    // If all related lists are visible=false then hide
    if ($scope.data.f._related_lists.length > 0) {
      for (var i in $scope.data.f._related_lists) {
        var list = $scope.data.f._related_lists[i];
        if (list.visible) {
          return false;
        }
      }
    }
    return true;
  }
 
  function clearStatus() {
    $scope.status = "";
  }
 
  function setupAttachmentHandler() {
    $scope.attachmentHandler = new nowAttachmentHandler(appendDone, appendError);
 
        $scope.$evalAsync(function() {
            $scope.attachmentHandler.setParams($scope.data.table, $scope.data.f._attachmentGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);
        });
 
    $scope.$on('dialog.upload_too_large.show', function(e) {
      $log.error($scope.data.largeAttachmentMsg);
      spUtil.addErrorMessage($scope.data.largeAttachmentMsg);
    });
  }
  setupAttachmentHandler();
 
  function appendDone() {
    // don't know here whether upload succeeded, so can't show msg either way
    $scope.$broadcast("sp.attachments.update", $scope.data.f._attachmentGUID);
    spUtil.retrieveSessionMessages();
  }
 
  function appendError(error) {
    $scope.errorMessages.push(error);
    spUtil.addErrorMessage(error.msg + error.fileName);
  }
 
  if ($scope.data.f.title) {
      $scope.$emit('sp.widget-modal.set-aria-label', $scope.data.f.title);
  }
}]]></client_script>
        <controller_as>c</controller_as>
        <css>/* Styling for the panel */
.panel {
  margin-bottom: 20px;
  border: 1px solid #ddd;
  border-radius: 4px;
  background-color: #fff;
}

/* Styling for the panel body */
.panel-body {
  padding: 15px;
  
}

/* Styling for the panel footer */
.panel-footer {
  padding: 10px 15px;
  background-color: #f5f5f5;
  border-top: 1px solid #ddd;
  border-bottom-right-radius: 3px;
  border-bottom-left-radius: 3px;
}

/* Styling for the button */
.btn {
  display: inline-block;
  padding: 6px 12px;
  margin-bottom: 0;
  font-size: 14px;
  font-weight: 400;
  line-height: 1.42857143;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  -ms-touch-action: manipulation;
  touch-action: manipulation;
  cursor: pointer;
  user-select: none;
  background-image: none;
  border: 1px solid transparent;
  border-radius: 4px;
  color: #fff;
  background-color: #337ab7;
  border-color: #2e6da4;
}

/* Styling for the primary action button */
.btn-primary {
  background-color: #428bca;
  border-color: #357ebd;
}

/* Styling for the disabled button */
.btn:disabled,
.btn[disabled] {
  cursor: not-allowed;
  opacity: 0.65;
  filter: alpha(opacity=65);
}

/* Styling for the form elements */
.form-group {
  margin-bottom: 15px;
}

/* Styling for the input fields */
.form-control {
  display: block;
  width: 100%;
  height: 34px;
  padding: 6px 12px;
  font-size: 14px;
  line-height: 1.42857143;
  color: #555;
  background-color: #fff;
  background-image: none;
  border: 1px solid #ccc;
  border-radius: 4px;
  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
  box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
  -webkit-transition: border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;
  -o-transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
  transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
}

/* Styling for the labels */
.label {
  display: inline;
  padding: .2em .6em .3em;
  font-size: 75%;
  font-weight: 700;
  line-height: 1;
  color: #fff;
  text-align: center;
  white-space: nowrap;
  vertical-align: baseline;
  border-radius: .25em;
}

/* Styling for the alert messages */
.alert {
  padding: 15px;
  margin-bottom: 20px;
  border: 1px solid transparent;
  border-radius: 4px;
}

/* Styling for the success alert */
.alert-success {
  color: #3c763d;
  background-color: #dff0d8;
  border-color: #d6e9c6;
}

/* Styling for the info alert */
.alert-info {
  color: #31708f;
  background-color: #d9edf7;
  border-color: #bce8f1;
}

/* Styling for the error alert */
.alert-danger {
  color: #a94442;
  background-color: #f2dede;
  border-color: #ebccd1;
}

label.h4 {
  display: none;
}

a.ng-binding.ng-scope {
  display: none;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>charity_profile</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Charity Profile</name>
        <option_schema>[{"name":"","section":"other","label":"","type":"string"}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function($sp, input, data, options, gs) {
	// Messages and settings
	data.attachmentUploadSuccessMsg = gs.getMessage("Attachment upload was successful");
	data.recordAddedMsg = gs.getMessage("Record Added");
	data.updatedMsg = gs.getMessage("Record Updated");
	data.addAttachmentMsg = gs.getMessage("Add an attachment");
	data.supportedAttachmentExtensions = gs.getProperty("glide.attachment.extensions", '');
	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;
	data.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB");

	// Admin check and other settings
	data.isAdmin = gs.hasRightsTo('sp/configure.all/execute', null);
	data.emptyStateTemplate = options.empty_state_template;
	var isPopup = false;

	if (input) {
		data.table = input.table || 'x_1383184_charityb_user_profile'; // Set your table
		data.sys_id = input.sys_id;
		data.view = input.view;
		var result = {};
		if (input._fields) {
			result = $sp.saveRecord(data.table, input.sys_id, input._fields);
			data.sys_id = result.sys_id;
		}

		if (input.sys_id == '-1')
			data.isNewRecord = true;
		if (input.isPopup === true)
			isPopup = true;
	} else {
		data.table = options.table || $sp.getParameter("t") || 'x_1383184_charityb_user_profile'; // Set your table
		data.sys_id = options.sys_id || $sp.getParameter("sys_id");
		if (!data.sys_id && options.sys_id_required != "true")
			data.sys_id = "-1";
		data.view = options.view || $sp.getParameter("view"); // no default
	}

	if (!data.table) return;

	if (data.table == "sys_attachment") {
		data.tableUnsupported = true;
		return;
	}

	if (!data.sys_id) return;

	var gr = new GlideRecord(data.table);

	if (data.sys_id != "-1") {
		if (!gr.get(data.sys_id)) {
			data.isValid = false;
			return;
		}
		if (!gr.canRead()) return; // can't see requested record
	}

	if (data.sys_id == "-1" && !gr.canCreate()) return; // can't create a new record

	data.isValid = data.sys_id == "-1" || gr.isValid();
	if (!data.isValid) return;

	data.table = gr.getRecordClassName();
	data.canWrite = gr.canWrite();
	var hasRecordAccess = data.sys_id == "-1" ? gr.canCreate() : data.canWrite;
	data.canAttach = !options.omitAttachmentButton && hasRecordAccess && gs.hasRole(gs.getProperty('glide.attachment.role')) && gr.isValidField('attachment');

	data.f = $sp.getForm(data.table, data.sys_id, data.query, data.view, isPopup);

	var policies = data.f.policy || []
	policies.forEach(function(policy, index) {
		if (policy['is_ui_data_policy']) {
			policies[index].onload = true;
		}
	});

	for (var f in data.f._formatters) {
		var fm = data.f._formatters[f];
		if (fm.formatter == "activity.xml") {
			fm.hardcoded = true;
			fm.widgetInstance = $sp.getWidget('widget-ticket-conversation', {
				table: data.table,
				sys_id: data.sys_id,
				includeExtended: true,
				hideAttachmentBtn: true,
				title: "${Activity}",
				use_dynamic_placeholder: true,
				btnLabel: "${Post}"
			});
		} else if (fm.formatter == "com_glideapp_servicecatalog_veditor" || fm.formatter == "com_glideapp_questionset_default_question_editor") {
			var qsConfig = $sp.getValue('quick_start_config');
			if (qsConfig) qsConfig = JSON.parse(qsConfig)[0];
			fm.widgetInstance = $sp.getWidget(fm.widget, {
				table: data.table,
				sys_id: data.sys_id,
				readonly_variable_editor: qsConfig ? qsConfig.readonly_variable_editor : 'false'
			});
		} else {
			fm.widgetInstance = $sp.getWidget(fm.widget, data);
		}
	}
})($sp, input, data, options, gs);]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>christy</sys_created_by>
        <sys_created_on>2024-06-03 06:06:01</sys_created_on>
        <sys_id>8435353593a2021094e3f15a7bba10fb</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>Charity Profile</sys_name>
        <sys_package display_value="CharityBids" source="x_1383184_charityb">bcaeeadb9369421094e3f15a7bba1090</sys_package>
        <sys_policy/>
        <sys_scope display_value="CharityBids">bcaeeadb9369421094e3f15a7bba1090</sys_scope>
        <sys_update_name>sp_widget_8435353593a2021094e3f15a7bba10fb</sys_update_name>
        <sys_updated_by>christy</sys_updated_by>
        <sys_updated_on>2024-06-04 07:07:27</sys_updated_on>
        <template><![CDATA[<div ng-if="::!data.isValid && !data.emptyStateTemplate" class="panel panel-default">
  <div class="panel-body wrapper-lg text-center">
    <span ng-if="!data.tableUnsupported">${Record not found}</span>
    <span ng-if="data.tableUnsupported">${Form view not supported for requested table}</span>
  </div>
</div>

<div ng-if="!data.isValid && data.emptyStateTemplate" class="panel-shift">
  <div class="empty-state-wrapper panel panel-default" ng-include="data.emptyStateTemplate"></div>
</div>

<div ng-if="data.isValid" class="panel-shift">
  <div class="" ng-if="!data.f._view.length && data.hideRelatedLists && data.emptyStateTemplate">
    <div class="empty-state-wrapper panel panel-default" ng-include="data.emptyStateTemplate"></div>
  </div>
  
  

  
  
  <div class="" ng-if="!data.f._view.length && data.hideRelatedLists && !data.emptyStateTemplate">
    <div class="panel panel-default">
      <div class="panel-heading"><span class="panel-title">{{data.f.title}}</span> <span ng-if="::options.showFormView == 'true' && data.f.view != ''">[{{data.f.view_title}} view]</span></div>
      <h1>Helloosdasda </h1>
      <div class="panel-body wrapper-lg text-center">
        ${No elements to display}
      </div>
    </div>
  </div>

  <!-- readOnly due to scope -->
  <div ng-if="isPageReady && data.f.outOfScope" class="read-only-message">
    <div class="alert alert-info sp-cross-scope" role="alert">
      <p>${This record is in the <strong>{{data.f.recordScopeLabel}}</strong> application, but <strong>{{data.f.currentScopeLabel}}</strong> is the current application.}</p>
    </div>
  </div>
  <div ng-show="isPageReady" class="panel panel-default" ng-if="data.f._view.length || !data.hideRelatedLists" >
    <div class="panel-body">
      <!-- performance debug -->
      <div ng-if="data.show_sql">
        <div class="comment">
          <span ng-if="data.f._perf.sql_count">${SQL Statements {{data.f._perf.sql_count}}}, </span>
          <span>${Time {{data.f._perf.time}}}</span>
        </div>
        <div ng-repeat="s in data.f._perf.sql" class="{{s.type}}">
          {{s.statement}}
        </div>
      </div>
      
      <!-- attachments -->
      <sp-attachment-manager table="::data.table" sys-id="data.f._attachmentGUID" omit-edit="::!data.canAttach"></sp-attachment-manager>
      <!-- asterisk info text -->
      <div ng-if="mandatory.length > 0" class="asterisk-div">
        <span class="fa fa-asterisk asterisk mandatory" title="${asterisk}"></span> ${Indicates required}
      </div>
      <!-- form -->
      <form id="widget-form">
        <div>
          <sp-model form_model="data.f" mandatory="mandatory" embedded_in_modal="embeddedInModal"></sp-model>
        </div>
      </form>
      <!-- UI Action Links -->
      <div ng-if="getUIActions('link').length > 0">
        <label class="h4" role="heading" aria-level="{{embeddedInModal ? '2' : '3'}}" style="margin: 0;">${Related Links}</label>
        <nav aria-label="${Related Links}">
          <div ng-repeat="action in getUIActions('link')">
            <a href ng-click="triggerUIAction(action)" gsft_id="{{::action.sys_id}}">{{::action.name}}</a>
          </div>
        </nav>
      </div>
      <!-- related lists -->
      <div ng-if="!data.hideRelatedLists">
        <label class="h4" role="heading" aria-level="{{embeddedInModal ? '2' : '3'}}" style="margin: 0">${Related Lists}</label>
        <div style="margin-bottom: 7px; padding-bottom: 7px; border-bottom: 1px solid #f5f5f5;">
          <nav aria-label="${Related Lists}">
            <span ng-repeat="rl in data.f._related_lists" ng-if="rl.visible">
              <a ng-if="rl.type != 'REL'" ng-href="?id=lf&table={{::rl.table}}&filter={{rl.field}}%3D{{data.f.sys_id}}{{rl.filter ? '^' + rl.filter : ''}}&view={{data.f.view}}" ng-click="openRelatedList($event, {id: 'lf', table: '{{::rl.table}}', filter: '{{rl.field}}%3D{{data.f.sys_id}}'})">{{rl.plural}}
                <span class="label label-as-badge label-primary" ng-if="rl.count">{{::rl.count}}</span>
              </a>
              <a ng-if="::rl.type == 'REL'" href="?id=lf&table={{::rl.table}}&relationship_id={{rl.relationship_id}}&apply_to={{rl.apply_to}}&apply_to_sys_id={{rl.apply_to_sys_id}}&view={{::data.f.view}}" ng-click="openRelatedList($event, {id: 'lf', table: '{{::rl.table}}', apply_to: '{{rl.apply_to}}', apply_to_sys_id: '{{rl.apply_to_sys_id}}', relationship_id: '{{rl.relationship_id}}'})">{{rl.label}}
                <span class="label label-as-badge label-primary" ng-if="rl.count">{{rl.count}}</span>
              </a>
              <span ng-if="!$last" class="related-lists-vertical-bar" aria-hidden="true"> | </span>
            </span>
          </nav>
        </div>
      </div>
    </div>

    <div class="panel-footer">
      <button ng-click="triggerUIAction(action)" ng-disabled="submitting" ng-repeat="action in getUIActions('button') | filter: hideDuplicateSaveAction" class="btn action-btn" ng-class="::getButtonClass(action)" gsft_id="{{::action.sys_id}}">{{action.name}}</button>
      <span>{{status}}</span>
      <button ng-if="getPrimaryAction()" type="submit" ng-click="triggerUIAction(getPrimaryAction())" ng-disabled="submitting" class="btn btn-primary action-btn pull-right" gsft_id="{{::getPrimaryAction().sys_id ? getPrimaryAction().sys_id : ''}}">${Save} <span ng-if="saveButtonSuffix">(${{{saveButtonSuffix}}})</span></button>
      <div style="clear: both;"></div>
      <div ng-if="mandatory.length" class="alert alert-info" style="margin-top: .5em" aria-live="polite" aria-atomic="true">
        <span ng-if="mandatory.length > 0">${Required information} </span>
        <span ng-repeat="f in mandatory" class="label sc-field-error-label" ng-bind="f.label"></span>
      </div>
    </div>
  </div>
</div>
has context menu]]></template>
    </sp_widget>
</record_update>
